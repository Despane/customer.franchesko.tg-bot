import { Context } from "telegraf";
import { UserService } from "../service/UserService";
import { Enterprise } from '../class/1cServer'
import * as path from 'path'

const BUTTONS = {
	SEND_PHONE: {
		text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
		request_contact: true,
	},
	LOGOUT: {
		text: "–í—ã–π—Ç–∏",
	},
	BALANCE: {
		text: "–ë–∞–ª–∞–Ω—Å",
	},
	QR_CODE: {
		text: "QR-–∫–æ–¥",
	},
	LAST_OPERATIONS: {
		text: "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
	},
};

const KEYBOARDS = {
	SEND_PHONE: {
		reply_markup: {
			keyboard: [[BUTTONS.SEND_PHONE]],
			resize_keyboard: true,
			one_time_keyboard: true,
		},
	},
	AUTHORIZED: {
		reply_markup: {
			keyboard: [
				[BUTTONS.BALANCE, BUTTONS.QR_CODE],
				[BUTTONS.LAST_OPERATIONS, BUTTONS.LOGOUT],
			],
			resize_keyboard: true,
		},
	},
	REMOVE: {
		reply_markup: {
			remove_keyboard: true as true,
		},
	},
};


export class UserController {
	private userService: UserService;

	constructor(userService: UserService) {
		this.userService = userService;
	}

	public async handleStart(ctx: Context): Promise<void> {
		const userId = ctx.from?.id;

		if (!userId) return;

		const user = this.userService.getUserInfo(userId);

		if (!user) {
			this.userService.addUser(userId, "", "");
			this.userService.updateUserState(userId, "awaiting_phone");

			await ctx.reply(
				"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
				KEYBOARDS.SEND_PHONE
			);
		} else if (user.state === "awaiting_phone") {
			await ctx.reply(
				"–í—ã –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
				KEYBOARDS.SEND_PHONE
			);
		} else if (user.state === "awaiting_code") {
			await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.");
		} else if (user.state === "authorized") {
			await ctx.reply("–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?", KEYBOARDS.AUTHORIZED);
		}
	}

	public async handleContact(ctx: Context): Promise<void> {
		const userId = ctx.from?.id;

		if (!userId) return;

		if (ctx.message && "contact" in ctx.message) {
			const contact = ctx.message.contact;

			if (contact && contact.phone_number) {
				let user = this.userService.getUserInfo(userId);

				if (user && user.state === "awaiting_phone") {
					try {
						let tempUser = await Enterprise.getCardByPhone(contact.phone_number);

						if (tempUser) {
							// –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º
							this.userService.addUser(userId, tempUser[1], contact.phone_number);
							this.userService.updateUserCode(userId,tempUser[0])
							const code = this.userService.generateVerificationCode(userId);
							console.log(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${code}`);
							this.userService.updateUserState(userId, "awaiting_code");

							await ctx.reply(
								`–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (${contact.phone_number}) —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω. –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞–º –∫–æ–¥, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.`
							);
						} else {
							throw new Error("–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
						}
					} catch (error) {
						console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
						// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
						const code = this.userService.generateVerificationCode(userId);
						console.log(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${code}`);
						this.userService.addUser(userId, "", contact.phone_number);
						this.userService.updateUserState(userId, "awaiting_code");

						await ctx.reply(
							`–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (${contact.phone_number}) —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω. –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞–º –∫–æ–¥, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.`
						);
					}
				} else if (user && user.state === "authorized") {
					await ctx.reply("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?");
				}
			} else {
				await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
			}
		} else {
			await ctx.reply("–û–∂–∏–¥–∞–ª—Å—è –∫–æ–Ω—Ç–∞–∫—Ç, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ–≥–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç.");
		}
	}

	public async handleText(ctx: Context): Promise<void> {
		const userId = ctx.from?.id;

		if (!userId) return;

		const messageText = ctx.message && "text" in ctx.message ? ctx.message.text : null;

		if (!messageText) {
			ctx.reply("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.");
			return;
		}

		const user = this.userService.getUserInfo(userId);

		if (!user) {
			await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.");
			return;
		}

		if (user.state === "authorized") {
			switch (messageText) {
				case BUTTONS.BALANCE.text:
					try {
						const balance = await Enterprise.getBalanceByPhone(user.phone);
						await ctx.reply(`–í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} ‚ÇΩ`);
					} catch (error) {
						console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", error);
						await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
					}
					return;
				case BUTTONS.QR_CODE.text:
					try {
						if(user.code){
						const qr = await Enterprise.getQRCard(user.code);
						const filePath = path.join(__dirname,'..', 'class', 'cache', qr);

						await ctx.replyWithPhoto({ source: filePath });
					}
						else{
							await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å qr-–∫–æ–¥. –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
						}
					}
					catch (error) {
						console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è qr-–∫–æ–¥–∞:", error);
						await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å qr-–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
					}
					return;
				case BUTTONS.LAST_OPERATIONS.text:
					try {
						if(user.code){
						const history = await Enterprise.getHistory(user.code);
						console.log(history)
						if (!history.length) {
							await ctx.reply("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.");
							return;
						}

						let escapeMarkdown = (text:any) => {
							return text.replace(/[_*[\]()~`>#+\-=|{}.!]/g, "\\$&");// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2
						};

						let message = "üìú *–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤:*\n\n";

						history.forEach((entry:any) => {
							const date = new Date(entry.date).toLocaleDateString("ru-RU"); // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
							message += `üìÖ *–î–∞—Ç–∞:* ${escapeMarkdown(date)}\n`;
							message += `üîπ *–û–ø–∏—Å–∞–Ω–∏–µ:* ${escapeMarkdown(entry.description)}\n`;
							message += `üí∞ *–ë–∞–ª–ª—ã:* ${entry.total > 0 ? `\\+${escapeMarkdown(entry.total.toString())}` : escapeMarkdown(entry.total.toString())} –±–∞–ª–ª–æ–≤\n`;
							message += `\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
						});

						await ctx.replyWithMarkdownV2(message);}
						else{
							await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å. –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
						}
					} catch (error) {
						console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:", error);
						await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
					}
					return;
				case BUTTONS.LOGOUT.text:
					this.userService.updateUserState(userId, "awaiting_phone");
					await ctx.reply(
						"–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.",
						KEYBOARDS.REMOVE
					);
					return;
				default:
					await ctx.reply("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?", KEYBOARDS.AUTHORIZED);
					return;
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		if (user.state === "awaiting_phone") {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
			const phoneRegex = /^\+?[1-9]\d{1,14}$/; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç E.164
			if (phoneRegex.test(messageText)) {
				try {
					let tempUser = await Enterprise.getCardByPhone(messageText);

					if (tempUser) {
						// –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º
						this.userService.addUser(userId, tempUser[1], messageText);
						this.userService.updateUserCode(userId,tempUser[0])
						const code = this.userService.generateVerificationCode(userId);
						console.log(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${code}`);
						this.userService.updateUserState(userId, "awaiting_code");
						await ctx.reply(
							`–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (${messageText}) —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω. –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞–º –∫–æ–¥, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.`
						);
					} else {
						throw new Error("–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
					}
				} catch (error) {
					console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
					// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
					const code = this.userService.generateVerificationCode(userId);
					console.log(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${code}`);
					this.userService.addUser(userId, "", messageText);
					this.userService.updateUserState(userId, "awaiting_code");

					await ctx.reply(
						`–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (${messageText}) —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω. –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞–º –∫–æ–¥, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.`
					);
				}
			} else {
				await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +123456789).");
			}
		} else if (user.state === "awaiting_code") {
			const isCodeValid = this.userService.verifyCode(userId, messageText);

			if (isCodeValid) {
				if (user.code) {
					console.log(user.code)
					// –ï—Å–ª–∏ –∫–æ–¥ –≤–µ—Ä–Ω—ã–π, –¥–∞–ª–µ–µ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
					this.userService.updateUserState(userId, "authorized");
					await ctx.reply("–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã");
					try {
						let auth = await Enterprise.updateCardDetailsByPhone(user.phone,'',userId)
					}
					catch (e){

					}
				}
				else{
				this.userService.updateUserState(userId, "awaiting_name");
				this.userService.resetFailedAttempts(userId); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
				await ctx.reply("–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");}
			} else {
				// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
				const attemptsLeft = this.userService.incrementFailedAttempts(userId);

				if (attemptsLeft > 0) {
					await ctx.reply(
						`–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å ${attemptsLeft} ${attemptsLeft === 1 ? "–ø–æ–ø—ã—Ç–∫–∞" : "–ø–æ–ø—ã—Ç–∫–∏"}.`
					);
				} else {
					// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
					this.userService.updateUserState(userId, "awaiting_phone");
					this.userService.resetFailedAttempts(userId); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
					await ctx.reply(
						"–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å –∑–∞–Ω–æ–≤–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
						KEYBOARDS.SEND_PHONE
					);
				}
			}
		} else if (user.state === "awaiting_name") {
			
			this.userService.addUser(userId, messageText, user.phone);
			this.userService.updateUserState(userId, "awaiting_mail");
			await ctx.reply(`–°–ø–∞—Å–∏–±–æ, ${messageText}! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É`, KEYBOARDS.REMOVE);
		}
		else if (user.state === "awaiting_mail") {
			try {
				let regUser= await Enterprise.addNewCard(user.name,user.phone,messageText,user.id)
				this.userService.updateUserCode(userId,regUser)
				this.userService.updateUserState(userId, "authorized");
				await ctx.reply(
					`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É`
				);
			}
		catch (e) {
			await ctx.reply(
				`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`
			);
			this.userService.updateUserState(userId,"unauthorized")
			this.userService.addUser(userId, "", "");
		}
		}
		else if (user.state === "authorized") {
			if (messageText === BUTTONS.LOGOUT.text) {
				this.userService.updateUserState(userId, "awaiting_phone");

				await ctx.reply(
					"–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.",
					KEYBOARDS.REMOVE
				);
			} else {
				await ctx.reply("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?");
			}
		} else {
			await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å –∫–æ–º–∞–Ω–¥—ã /start.");
		}
	}

	public async handleLogout(ctx: Context): Promise<void> {
		const userId = ctx.from?.id;

		if (!userId) return;

		const user = this.userService.getUserInfo(userId);

		if (!user || user.state !== "authorized") {
			await ctx.reply("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∏–ª–∏ —É–∂–µ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.");
			return;
		}

		this.userService.removeUser(userId); // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞

		await ctx.reply(
			"–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.",
			KEYBOARDS.REMOVE
		);
	}
}
